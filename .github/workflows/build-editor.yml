# Build Unity3d editor images
# ========================================================
#
# - Check out latest release and build `editor`.
#   - The existed image tag building will be skipped.
#   - Use `skopeo` to check for the existence of tags.
# - Use `unity-changeset` to get the changeset for a Unity version.
# - Remove large directories before building.
# - This workflow is dispatched from the 'Build All' workflow.
# - The jobs sometimes fail due to timeouts or docker errors.
#
# [Required secrets]
#   DOCKER_USERNAME:    Docker username to login
#   DOCKER_PASSWORD:    Docker password/token
#   GH_WORKFLOW_TOKEN:  Github parsonal access token to dispatch workflow
name: üõ†Ô∏è Build Editor

on:
  workflow_dispatch:
    inputs:
      versions:
        description: "Unity versions array to build"
        required: true
        default: '[ "2018.4.30f1" ]'
      module:
        description: "Unity module to build.\n(base|linux-il2cpp|windows-mono|mac-mono|ios|android|webgl)"
        required: true
        default: 'base'
      tag:
        description: "Release tag"
        required: true
        default: "v1.0.0"

jobs:
  build:
    name: Build ${{ matrix.version }}-${{ inputs.module }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      packages: write
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        version: ${{ fromJson(inputs.versions) }}
    steps:
      ###########################
      #    Checkout     #
      ###########################
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.tag }}

      ###########################
      #          Setup          #
      ###########################
      - name: üßπ Free disk space
        run: .github/workflows/scripts/free_disk_space.sh

      - name: üîç Find changeSet for ${{ matrix.version }}
        id: changeSet
        run: echo "value=`npx --yes unity-changeset ${{ matrix.version }}`" | tee $GITHUB_OUTPUT

      ###########################
      #       Setup Docker      #
      ###########################
      - name: ‚öôÔ∏è Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: ‚öôÔ∏è Setup buildx
        uses: docker/setup-buildx-action@v3
      - name: üîë Login ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: mob-sakai
          password: ${{ github.token }}
      - name: üîë Login docker.io
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: mobsakai
          password: ${{ secrets.DOCKER_PASSWORD }}

      ###########################
      #       Setup meta        #
      ###########################
      - name: ‚öôÔ∏è Setup metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ghcr.io/mob-sakai/unity3d
            mobsakai/unity3d
          flavor: latest=false
          labels: |
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.documentation=${{ github.event.repository.html_url }}
          tags: |
            type=semver,pattern=${{ matrix.version }}-${{ inputs.module }}-{{raw}},value=${{ inputs.tag }}
            type=raw,value=${{ matrix.version }}-${{ inputs.module }}
            type=match,pattern=(${{ matrix.version }})-base,group=1,value=${{ matrix.version }}-${{ inputs.module }}

      ###########################
      # Build and push (Editor) #
      ###########################
      - name: üõ†Ô∏è Build and push image
        uses: docker/build-push-action@v6
        # if: steps.build-1.outcome == 'failure'
        id: build-1
        continue-on-error: true
        timeout-minutes: 40
        with:
          context: .
          file: editor/Dockerfile
          build-args: |
            baseImage=ghcr.io/mob-sakai/unity3d_base:${{ inputs.tag }}
            hubImage=ghcr.io/mob-sakai/unity3d_hub:${{ inputs.tag }}
            version=${{ matrix.version }}
            changeSet=${{ steps.changeSet.outputs.value }}
            module=${{ inputs.module }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}

      ###########################
      #          Retry          #
      ###########################
      - name: üí§ Sleep for retry
        if: steps.build-1.outcome == 'failure'
        run: sleep 120
      - name: üõ†Ô∏è Build and push image (retry)
        uses: docker/build-push-action@v6
        if: steps.build-1.outcome == 'failure'
        id: build-2
        # continue-on-error: true
        timeout-minutes: 40
        with:
          context: .
          file: editor/Dockerfile
          build-args: |
            baseImage=ghcr.io/mob-sakai/unity3d_base:${{ inputs.tag }}
            hubImage=ghcr.io/mob-sakai/unity3d_hub:${{ inputs.tag }}
            version=${{ matrix.version }}
            changeSet=${{ steps.changeSet.outputs.value }}
            module=${{ inputs.module }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}

      ###########################
      #  Dispatch build failed  #
      ###########################
      - name: üöÄ Dispatch 'Build Editor Failed'
        if: failure() && steps.build-2.outcome == 'failure'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: build-editor-failed.yml
          inputs: '{ "imageTag": "${{ matrix.version }}-${{ inputs.module }}-${{ inputs.tag }}" }'
          ref: ${{ github.ref }}
