# Build Unity3d editor images
# ========================================================
#
# - Check out latest release and build `editor`.
#   - The existed image tag building will be skipped.
#   - Use `skopeo` to check for the existence of tags.
# - Use `unity-changeset` to get the changeset for a Unity version.
# - Remove large directories before building.
# - This workflow is dispatched from the 'Build All' workflow.
# - The jobs sometimes fail due to timeouts or docker errors.
#
# [Required secrets]
#   DOCKER_USERNAME:    Docker username to login
#   DOCKER_PASSWORD:    Docker password/token
#   GH_WORKFLOW_TOKEN:  Github parsonal access token to dispatch workflow
name: "Build Editor üõ†Ô∏è"

on:
  workflow_dispatch:
    inputs:
      versions:
        description: "Unity versions array to build"
        required: true
        default: '[ "2018.4.30f1" ]'
      modules:
        description: "Unity modules array to build.\n(base|linux-il2cpp|windows-mono|mac-mono|ios|android|webgl)"
        required: true
        default: '[ "base", "linux-il2cpp", "windows-mono", "mac-mono", "ios", "android", "webgl" ]'
      releaseTag:
        description: "Release tag"
        required: true
        default: "v1.0.0"
      dryRun:
        description: "dryRun: Skip the image build and push"
        required: true
        default: "false"

jobs:
  build:
    name: Build ${{ matrix.version }}-${{ matrix.module }}
    runs-on: ubuntu-latest
    env:
      releaseTag: ${{ github.event.inputs.releaseTag }}
      dryRun: ${{ github.event.inputs.dryRun }}
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        version: ${{ fromJson(github.event.inputs.versions) }}
        module: ${{ fromJson(github.event.inputs.modules) }}
    steps:
      ###########################
      #        Setup env        #
      ###########################
      - uses: actions/checkout@v4
      - run: cat .env | sed 's/=\" *$/<<EOD/g' | sed 's/^\"/EOD/g' | grep '^[^# ]' >> $GITHUB_ENV

      ###########################
      #   Check latest release  #
      ###########################
      - uses: pozetroninc/github-action-get-latest-release@master
        id: latest
        if: env.releaseTag == ''
        with:
          repository: ${{ github.repository }}
          excludes: prerelease, draft
      - name: "üîç Get repo version"
        if: env.releaseTag == ''
        run: |
          releaseTag=${{ steps.latest.outputs.release }}
          echo "releaseTag=$releaseTag" >> $GITHUB_ENV | tee

      ###########################
      #    Checkout release     #
      ###########################
      - uses: actions/checkout@v4
        with:
          ref: ${{ env.releaseTag }}
      - name: "üîç Parse repo versions"
        id: versions
        run: |
          MAJOR=`echo ${{ env.releaseTag }} | tr -d 'v' | cut -d '.' -f 1`
          MINOR=`echo ${{ env.releaseTag }} | tr -d 'v' | cut -d '.' -f 2`
          PATCH=`echo ${{ env.releaseTag }} | tr -d 'v' | cut -d '.' -f 3`

          echo "repoVersion=${MAJOR:-0}.${MINOR:-0}.${PATCH:-0}" >> $GITHUB_ENV | tee

      ###########################
      #          Setup          #
      ###########################
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - name: "‚öôÔ∏è Setup"
        timeout-minutes: 10
        run: |
          # [SKIP] The image already exists.
          imageId="${{ env.DOCKER_REGISTRY }}/${{ env.EDITOR_IMAGE_REPOSITORY }}"
          imageTag="${{ matrix.version }}-${{ matrix.module }}-${{ env.repoVersion }}"
          [ -n "`skopeo list-tags docker://$imageId | jq -r '.Tags[]' | grep -x $imageTag || :`" ] && echo "The tag already exists" && exit 1 || :

          # The changeset for unity version
          echo "changeSet=`npx unity-changeset ${{ matrix.version }}`" >> $GITHUB_ENV | tee

          # The image description
          echo "editorDescription=$(cat ./editor/100-characters-dockerhub-description.txt)" >> $GITHUB_ENV | tee

          # Free disk space
          .github/workflows/scripts/free_disk_space.sh

      ###########################
      #       Setup meta        #
      ###########################
      - uses: docker/metadata-action@v5
        id: meta
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.EDITOR_IMAGE_REPOSITORY }}
          flavor: |
            latest=false
          labels: |
            org.opencontainers.image.description=${{ env.editorDescription }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.documentation=${{ github.event.repository.html_url }}
          tags: |
            type=semver,pattern=${{ matrix.version }}-${{ matrix.module }}-{{version}},value=${{ env.releaseTag }}
            type=raw,value=${{ matrix.version }}-${{ matrix.module }}
            type=match,pattern=(${{ matrix.version }})-base,group=1,value=${{ matrix.version }}-${{ matrix.module }}

      ###########################
      # Build and push (Editor) #
      ###########################
      - name: "üõ†Ô∏è Build and push (Editor)"
        uses: docker/build-push-action@v5
        if: env.dryRun != 'true' # && steps.build-1.outcome == 'failure'
        id: build-1
        continue-on-error: true
        timeout-minutes: 40
        with:
          context: .
          file: editor/Dockerfile
          build-args: |
            baseImage=${{ env.DOCKER_REGISTRY }}/${{ env.BASE_IMAGE_REPOSITORY }}:${{ env.repoVersion }}
            hubImage=${{ env.DOCKER_REGISTRY }}/${{ env.HUB_IMAGE_REPOSITORY }}:${{ env.repoVersion }}
            version=${{ matrix.version }}
            changeSet=${{ env.changeSet }}
            module=${{ matrix.module }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}

      ###########################
      #          Retry          #
      ###########################
      - run: sleep 300
        if: env.dryRun != 'true' && steps.build-1.outcome == 'failure'
      - name: "üõ†Ô∏è Build and push (Editor, retry)"
        uses: docker/build-push-action@v5
        if: env.dryRun != 'true' && steps.build-1.outcome == 'failure'
        id: build-2
        # continue-on-error: true
        timeout-minutes: 40
        with:
          context: .
          file: editor/Dockerfile
          build-args: |
            baseImage=${{ env.DOCKER_REGISTRY }}/${{ env.BASE_IMAGE_REPOSITORY }}:${{ env.repoVersion }}
            hubImage=${{ env.DOCKER_REGISTRY }}/${{ env.HUB_IMAGE_REPOSITORY }}:${{ env.repoVersion }}
            version=${{ matrix.version }}
            changeSet=${{ env.changeSet }}
            module=${{ matrix.module }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}

      ###########################
      #  Dispatch build failed  #
      ###########################
      - name: "üöÄ Dispatch 'Build Editor Failed'"
        if: failure() && steps.build-2.outcome == 'failure'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: "Build Editor Failed üö®"
          token: ${{ secrets.GH_WORKFLOW_TOKEN }}
          inputs: '{ "imageTag": "${{ matrix.version }}-${{ matrix.module }}-${{ env.repoVersion }}" }'
          ref: ${{ github.ref }}
