# [Required secrets]
#   DOCKERHUB_PASSWORD: DockerHub password to login
#   GH_WORKFLOW_TOKEN: Github parsonal access token (repo) to dispatch workflow
name: Build All

on:
  workflow_dispatch:
    inputs:
      dryRun:
        description: "Skip image build and push"
        required: true
        default: "true"
  # schedule:
  #   - cron: "0 0 * * *" # daily

env:
  DOCKERHUB_USERNAME: mobsakai # DockerHub user name
  # DOCKERHUB_PASSWORD=********       # from repository secret
  BASE_IMAGE: mobsakai/unity_base # Base image ID
  HUB_IMAGE: mobsakai/unity_hub # Hub image ID
  EDITOR_IMAGE: mobsakai/unity_editor # Editor image ID
  # Unity versions to build
  MINIMUM_UNITY_VERSION: "2018.3" # Minimum Unity version to build
  INCLUDE_BETA_VERSIONS: false # Include alpha/beta versions
  EXCLUDE_IMAGE_TAGS: | # Excluded image tags (Regular expressions)
    2018.*-linux-il2cpp
    2019.1.*-linux-il2cpp
    2019.2.*-linux-il2cpp
    2021.1.0a

jobs:
  build:
    name: "Build base and hub"
    runs-on: ubuntu-18.04
    outputs:
      releaseTag: ${{ env.releaseTag }}
      repoVersionFull: ${{ env.repoVersionFull }}
      repoVersionMinor: ${{ env.repoVersionMinor }}
      repoVersionMajor: ${{ env.repoVersionMajor }}
    steps:
      ###########################
      #  Check build workflows  #
      ###########################
      - name: Check build workflows
        id: check
        run: |
          # Get in-progress or queued workflows.
          gh auth login --with-token < <(echo ${{ github.token }})
          RUNNING_WORKFLOWS=`gh api -X GET /repos/${{ github.repository }}/actions/runs | jq -c '[ .workflow_runs[] | select(.status | test("in_progress|queued")) | .name ]'`

          # [ERROR] Any 'Build Editor' workflow is in progress.
          [ 0 -lt `echo $RUNNING_WORKFLOWS | jq '[ .[] | select ( . == "Build Editor" ) ] | length'` ] && echo "::error::Any 'Build Editor' workflow is running." && exit 1 || :

          # [ERROR] Other 'Build All' workflow is in progress.
          [ 1 -lt `echo $RUNNING_WORKFLOWS | jq '[ .[] | select ( . == "Build All" ) ] | length'` ] && echo "::error::Other 'Build All' workflow is running." && exit 1 || :

      ###########################
      # Checkout latest release #
      ###########################
      - uses: pozetroninc/github-action-get-latest-release@master
        id: latest
        with:
          repository: ${{ github.repository }}
          excludes: prerelease, draft
      - name: Checkout latest release
        uses: actions/checkout@v2
        with:
          ref: ${{ steps.latest.outputs.release }}
      - name: Get repo versions
        id: versions
        run: |
          releaseTag=${{ steps.latest.outputs.release }}

          MAJOR=`echo $releaseTag | tr -d 'v' | cut -d '.' -f 1`
          MINOR=`echo $releaseTag | tr -d 'v' | cut -d '.' -f 2`
          PATCH=`echo $releaseTag | tr -d 'v' | cut -d '.' -f 3`

          echo "repoVersionFull=${MAJOR:-0}.${MINOR:-0}.${PATCH:-0}" >> $GITHUB_ENV
          echo "repoVersionMinor=${MAJOR:-0}.${MINOR:-0}" >> $GITHUB_ENV
          echo "repoVersionMajor=${MAJOR:-0}" >> $GITHUB_ENV

      ###########################
      #          Setup          #
      ###########################
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
      - name: Setup
        id: setup
        run: |
          # If the image tag already exists, skip the build. (base)
          [ -n "`skopeo list-tags docker://$BASE_IMAGE || echo '' | jq -r '.Tags[]' | grep -x '${{ env.repoVersionFull }}'`" ] && echo "::set-output name=base_skip::true" || :

          # If the image tag already exists, skip the build. (hub)
          [ -n "`skopeo list-tags docker://$HUB_IMAGE  || echo '' | jq -r '.Tags[]' | grep -x '${{ env.repoVersionFull }}'`" ] && echo "::set-output name=hub_skip::true" || :

      ###########################
      #  Build and push (Base)  #
      ###########################
      - name: Build and push (Base)
        if: steps.setup.outputs.base_skip != 'true' || ${{ github.event.inputs.dryRun }} != 'true'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: base/Dockerfile
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          tags: |
            ${{ env.BASE_IMAGE }}:ubuntu-${{ env.repoVersionFull }}
            ${{ env.BASE_IMAGE }}:${{ env.repoVersionFull }}
            ${{ env.BASE_IMAGE }}:ubuntu-${{ env.repoVersionMinor }}
            ${{ env.BASE_IMAGE }}:${{ env.repoVersionMinor }}
            ${{ env.BASE_IMAGE }}:ubuntu-${{ env.repoVersionMajor }}
            ${{ env.BASE_IMAGE }}:${{ env.repoVersionMajor }}
            ${{ env.BASE_IMAGE }}:ubuntu-latest
            ${{ env.BASE_IMAGE }}:latest

      ###########################
      #  Build and push (Hub)   #
      ###########################
      - name: Build and push (Hub)
        if: steps.setup.outputs.hub_skip != 'true' || ${{ github.event.inputs.dryRun }} != 'true'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: hub/Dockerfile
          build-args: |
            baseImage=${{ env.BASE_IMAGE }}:${{ env.repoVersionFull }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          tags: |
            ${{ env.HUB_IMAGE }}:ubuntu-${{ env.repoVersionFull }}
            ${{ env.HUB_IMAGE }}:${{ env.repoVersionFull }}
            ${{ env.HUB_IMAGE }}:ubuntu-${{ env.repoVersionMinor }}
            ${{ env.HUB_IMAGE }}:${{ env.repoVersionMinor }}
            ${{ env.HUB_IMAGE }}:ubuntu-${{ env.repoVersionMajor }}
            ${{ env.HUB_IMAGE }}:${{ env.repoVersionMajor }}
            ${{ env.HUB_IMAGE }}:ubuntu-latest
            ${{ env.HUB_IMAGE }}:latest

  ###########################
  #  Dispatch build editor  #
  ###########################
  dispatch-build-eitor:
    name: "ðŸš€ Dispatch 'Build Editor' (${{ matrix.module }})"
    needs: build
    runs-on: ubuntu-18.04
    env:
      releaseTag: ${{ needs.build.outputs.releaseTag }}
      repoVersionFull: ${{ needs.build.outputs.repoVersionFull }}
      repoVersionMinor: ${{ needs.build.outputs.repoVersionMinor }}
      repoVersionMajor: ${{ needs.build.outputs.repoVersionMajor }}
    strategy:
      fail-fast: false
      matrix:
        module:
          [base, linux-il2cpp, windows-mono, mac-mono, ios, android, webgl]
    steps:
      ###########################
      #   Setup build matrix    #
      ###########################
      - name: Setup build matrix
        id: setup
        run: |
          # If all the combination tags to be built are existed in the registry: steps.setup.outputs.skip=true

          echo "======== Parameters ========"
          module=${{ matrix.module }}
          echo "module=$module"
          echo "repoVersionFull=$repoVersionFull"

          echo "======== Exist tags ========"
          echo '' > .existtags
          skopeo list-tags docker://${EDITOR_IMAGE} | jq -r '.Tags[]' | grep -v '^ubuntu' | grep -e "-$module-$repoVersionFull$" > .existtags || :
          cat .existtags

          echo "======== Excluded image tags ========"
          echo -n "${EXCLUDE_IMAGE_TAGS}" | grep '.' > .excludedTags
          cat .excludedTags

          echo "======== Available Unity versions ========"
          if [ "$INCLUDE_BETA_VERSIONS" = 'true' ] ; then
              AVAILABLE_UNITY_VERSIONS=`npx unity-changeset list --versions --min $MINIMUM_UNITY_VERSION --all || :`
          else
              AVAILABLE_UNITY_VERSIONS=`npx unity-changeset list --versions --min $MINIMUM_UNITY_VERSION || :`
          fi
          echo "${AVAILABLE_UNITY_VERSIONS}"

          echo "======== Unity versions to build ========"
          UNITY_VERSIONS_TO_BUILD=`for version in $(echo "$AVAILABLE_UNITY_VERSIONS") ; do \
              [ -z "$(grep -x $version-$module-$repoVersionFull .existtags)" ] \
              && [ -z "$(echo $version-$module-$repoVersionFull | grep -f .excludedTags)" ] \
              && echo "$version" || : ; \
          done`
          [ -z "${UNITY_VERSIONS_TO_BUILD}" ] && echo "::warning::No versions to build." && echo "::set-output name=skip::true" || :

          UNITY_VERSIONS_TO_BUILD=`echo "${UNITY_VERSIONS_TO_BUILD}" | jq -R '.' | jq -s -c '.' | jq -R '.' || :`
          echo "${UNITY_VERSIONS_TO_BUILD}"

          echo "======== Build matrix ========"
          echo "::set-output name=versions::$UNITY_VERSIONS_TO_BUILD"

      ###########################
      #  Dispatch build editor  #
      ###########################
      - name: "ðŸš€ Dispatch 'Build Editor'"
        # If there is no version to be built, the build will be skipped.
        if: steps.setup.outputs.skip != 'true' || ${{ github.event.inputs.dryRun }} != 'true'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: Build Editor
          token: ${{ secrets.GH_WORKFLOW_TOKEN }}
          inputs: |
              '{
                "versions": ${{ steps.setup.outputs.versions }},
                "module": "${{ matrix.module }}",
                "releaseTag": "${{ env.releaseTag }}",
                "repoVersionFull": "${{ env.repoVersionFull }}",
                "repoVersionMinor": "${{ env.repoVersionMinor }}",
                "repoVersionMajor": "${{ env.repoVersionMajor }}",
                "dryRun": "${{ github.event.inputs.dryRun }}"
              }'
          ref: ${{ github.ref }}
