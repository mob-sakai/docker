# Build all images for latest release (serverless)
# ========================================================
#
# - Check out latest release and build `base` and `hub`.
#   - The existed image tag building will be skipped.
#   - Use `skopeo` to check for the existence of tags.
# - After `base` and `hub` images are built, the workflow to build the editor image will be dispatched on a per-module basis for readability.
#   * Build All (build base and hub)
#     * (dispatch) -> Build Editor (base, [2018.3.1f1, 2018.3.2f1, ...])
#     * (dispatch) -> Build Editor (linux-il2cpp, [2018.3.1f1, 2018.3.2f1, ...])
#     ...
#     * (dispatch) -> Build Editor (webgl, [2018.3.1f1, 2018.3.2f1, ...])
# - This workflow lists the available Unity versions without a versioning server.
#   - Use `unity-changeset` to get the available Unity versions.
#   - As workflow settings, you can specify the minimum Unity version and the excluded Unity versions/module.
# - The build workflows for a new release (in this repository) takes about a day.
#   - If no new build is needed, it will take about 5 minutes.
# - This workflow will run on release new version in this repository.
# - This workflow will run daily to build for new released Unity versions or to rebuild.
#   - If other build workflows ('Build All' or 'Build Editor') are in progress or queued, this workflow will be skipped.
#   - 'Build Editor' workflow may fail with a timeout or a docker error, but in most cases the rebuild will succeed.
#   - Use EXCLUDE_IMAGE_TAGS to ignore the specified Unity version/module combination.
#
# [Required secrets]
#   DOCKER_USERNAME:    Docker username to login
#   DOCKER_PASSWORD:    Docker password to login
#   GH_WORKFLOW_TOKEN:  Github parsonal access token to dispatch workflow
name: "Build All üõ†Ô∏è"

env:
  # ================= Registry settings =================
  DOCKER_REGISTRY: docker.io    # Docker Hub
# DOCKER_REGISTRY: ghcr.io      # GitHub Container Registry
# DOCKER_REGISTRY: gcr.io       # Google Container Registry
  # ================ Repository settings ================
  BASE_IMAGE_REPOSITORY: mobsakai/unity3d_base  # Base image name
  HUB_IMAGE_REPOSITORY: mobsakai/unity3d_hub    # Hub image name
  EDITOR_IMAGE_REPOSITORY: mobsakai/unity3d     # Editor image name
  # =================== Build settings ==================
  UBUNTU_IMAGE: ubuntu:18.04    # Ubuntu image ID
  MINIMUM_UNITY_VERSION: 2018.3 # Minimum Unity version to build
  INCLUDE_BETA_VERSIONS: true   # Include alpha/beta versions?
  EXCLUDE_IMAGE_TAGS: |         # Excluded image tags (Regular expressions)
    2018.*-linux-il2cpp
    2019.1.*-linux-il2cpp
    2019.2.*-linux-il2cpp
    <<AUTO_IGNORED_IMAGE_TAGS>>

on:
  repository_dispatch:
    types: [ build_all ]
  workflow_dispatch:
    inputs:
      dryRun:
        description: "dryRun: Skip the image build and push."
        required: true
        default: "false"
  schedule:
    - cron: "0 0 * * *" # daily

jobs:
  build:
    name: "Build base and hub"
    runs-on: ubuntu-latest
    env:
      dryRun: ${{ github.event.inputs.dryRun }}
    outputs:
      releaseTag: ${{ env.releaseTag }}
      repoVersion: ${{ env.repoVersion }}
    steps:
      ###########################
      #  Check build workflows  #
      ###########################
      - name: "üîç Check other build workflows"
        id: check
        run: |
          # Get in-progress or queued workflows.
          gh auth login --with-token < <(echo ${{ github.token }})
          RUNNING_WORKFLOWS=`gh api -X GET /repos/${{ github.repository }}/actions/runs | jq -c '[ .workflow_runs[] | select(.status | test("in_progress|queued")) | .name ]'`
          echo "======== Running Workflows ========"
          echo "$RUNNING_WORKFLOWS"

          # [ERROR] Any 'Build Editor' workflow is in progress.
          [ 0 -lt `echo $RUNNING_WORKFLOWS | jq '[ .[] | select ( . == "Build Editor üõ†Ô∏è" ) ] | length'` ] && echo "::error::Any 'Build Editor' workflow is running." && exit 1 || :

          # [ERROR] Other 'Build All' workflow is in progress.
          [ 1 -lt `echo $RUNNING_WORKFLOWS | jq '[ .[] | select ( . == "Build All üõ†Ô∏è" ) ] | length'` ] && echo "::error::Other 'Build All' workflow is running." && exit 1 || :

      ###########################
      # Checkout latest release #
      ###########################
      - uses: pozetroninc/github-action-get-latest-release@master
        id: latest
        with:
          repository: ${{ github.repository }}
          excludes: prerelease, draft
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.latest.outputs.release }}
      - name: "üîç Get repo versions"
        id: versions
        run: |
          releaseTag=${{ steps.latest.outputs.release }}
          MAJOR=`echo $releaseTag | tr -d 'v' | cut -d '.' -f 1`
          MINOR=`echo $releaseTag | tr -d 'v' | cut -d '.' -f 2`
          PATCH=`echo $releaseTag | tr -d 'v' | cut -d '.' -f 3`

          echo "releaseTag=$releaseTag" >> $GITHUB_ENV | tee
          echo "repoVersion=${MAJOR:-0}.${MINOR:-0}.${PATCH:-0}" >> $GITHUB_ENV | tee

      ###########################
      #          Setup          #
      ###########################
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: "‚öôÔ∏è Setup"
        id: setup
        run: |
          # If the image tag already exists, skip the build. (base)
          [ -n "`skopeo list-tags docker://${{ env.DOCKER_REGISTRY }}/${{ env.BASE_IMAGE_REPOSITORY }} | jq -r '.Tags[]' | grep -x '${{ env.repoVersion }}' || :`" ] && echo "::set-output name=base_skip::true" && echo "skip build (base)" || :

          # If the image tag already exists, skip the build. (hub)
          [ -n "`skopeo list-tags docker://${{ env.DOCKER_REGISTRY }}/${{ env.HUB_IMAGE_REPOSITORY }}  | jq -r '.Tags[]' | grep -x '${{ env.repoVersion }}' || :`" ] && echo "::set-output name=hub_skip::true"  && echo "skip build (hub)" || :

          # Load descriptions
          echo "baseDescription=$(cat ./base/100-characters-dockerhub-description.txt)" >> $GITHUB_ENV | tee
          echo "hubDescription=$(cat ./hub/100-characters-dockerhub-description.txt)" >> $GITHUB_ENV | tee

      ###########################
      #  Build and push (Base)  #
      ###########################
      - uses: crazy-max/ghaction-docker-meta@v3
        id: base-meta
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.BASE_IMAGE_REPOSITORY }}
          labels: |
            org.opencontainers.image.description=${{ env.baseDescription }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.documentation=${{ github.event.repository.html_url }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.repoVersion }}
      - name: "üõ†Ô∏è Build and push (Base)"
        if: steps.setup.outputs.base_skip != 'true' && env.dryRun != 'true'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: base/Dockerfile
          build-args: |
            ubuntuImage=${{ env.UBUNTU_IMAGE }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          labels: ${{ steps.base-meta.outputs.labels }}
          tags: ${{ steps.base-meta.outputs.tags }}

      ###########################
      #  Build and push (Hub)   #
      ###########################
      - uses: crazy-max/ghaction-docker-meta@v3
        id: hub-meta
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ env.HUB_IMAGE_REPOSITORY }}
          labels: |
            org.opencontainers.image.description=${{ env.hubDescription }}
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.documentation=${{ github.event.repository.html_url }}
          tags: |
            type=semver,pattern={{version}},value=${{ env.repoVersion }}
      - name: "üõ†Ô∏è Build and push (Hub)"
        if: steps.setup.outputs.hub_skip != 'true' && env.dryRun != 'true'
        uses: docker/build-push-action@v2
        with:
          context: .
          file: hub/Dockerfile
          build-args: |
            baseImage=${{ env.DOCKER_REGISTRY }}/${{ env.BASE_IMAGE_REPOSITORY }}:${{ env.repoVersion }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          labels: ${{ steps.hub-meta.outputs.labels }}
          tags: ${{ steps.hub-meta.outputs.tags }}

  ###########################
  #  Dispatch build editor  #
  ###########################
  dispatch-build-eitor:
    name: "üöÄ Dispatch 'Build Editor' (${{ matrix.module }})"
    needs: build
    runs-on: ubuntu-latest
    env:
      dryRun: ${{ github.event.inputs.dryRun }}
      releaseTag: ${{ needs.build.outputs.releaseTag }}
      repoVersion: ${{ needs.build.outputs.repoVersion }}
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        module:
          - base
          - linux-il2cpp
          - windows-mono
          - mac-mono
          - ios
          - android
          - webgl
    steps:
      ###########################
      #          Setup          #
      ###########################
      - uses: docker/login-action@v1
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: "‚öôÔ∏è Setup"
        id: setup
        run: |
          # If all the combination tags to be built are existed in the registry -> steps.setup.outputs.skip=true

          echo "======== Exist tags ========"
          echo '' > .existtags
          skopeo list-tags docker://${{ env.DOCKER_REGISTRY }}/${{ env.EDITOR_IMAGE_REPOSITORY }} | jq -r '.Tags[]' | grep -v '^ubuntu' | grep -e "-${{ matrix.module }}-${{ env.repoVersion }}$" | tee .existtags || :

          echo "======== Excluded image tags ========"
          echo -n "${{ env.EXCLUDE_IMAGE_TAGS }}" | grep '.' | tee .excludedTags

          echo "======== Available Unity versions ========"
          [ "${{ env.INCLUDE_BETA_VERSIONS }}" = 'true' ] && OPT='--all' || OPT=''
          npx unity-changeset list --versions --latest-lifecycle --min ${{ env.MINIMUM_UNITY_VERSION }} ${OPT} | tee .unityVersions

          echo "======== Unity versions to build ========"
          UNITY_VERSIONS_TO_BUILD=`for version in $(cat .unityVersions) ; do \
              [ -z "$(grep -x ${version}-${{ matrix.module }}-${{ env.repoVersion }} .existtags)" ] \
              && [ -z "$(echo ${version}-${{ matrix.module }}-${{ env.repoVersion }} | grep -f .excludedTags)" ] \
              && echo "${version}" || : ; \
          done`
          [ -z "${UNITY_VERSIONS_TO_BUILD}" ] && echo "::warning::No versions to build." && echo "::set-output name=skip::true" || :

          echo "======== Output ========"
          VERSIONS_JSON=`echo "${UNITY_VERSIONS_TO_BUILD}" | head -n 250 | jq -R '.' | jq -s -c '.' | jq -R '.' || echo '[]'`
          echo "${VERSIONS_JSON}"
          echo "::set-output name=versions::${VERSIONS_JSON}"

      ###########################
      #  Dispatch build editor  #
      ###########################
      - name: "üöÄ Dispatch 'Build Editor'"
        # If there is no version to be built, the build will be skipped.
        if: steps.setup.outputs.skip != 'true'
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: "Build Editor üõ†Ô∏è"
          token: ${{ secrets.GH_WORKFLOW_TOKEN }}
          inputs: '{ "versions": ${{ steps.setup.outputs.versions }}, "modules": "[\"${{ matrix.module }}\"]", "releaseTag": "${{ env.releaseTag }}", "dryRun": "${{ env.dryRun }}" }'
          ref: ${{ github.ref }}
