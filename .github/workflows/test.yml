name: üß™ Test

env:
  # MINIMUM_VERSION: The minimum version of Unity.
  MINIMUM_VERSION: 2021.3
  # EXCLUDE_FILTER: The excluded versions of Unity.
  EXCLUDE_FILTER: '(2022.1|2022.2|2023.1|2023.2|2023.3)'

on:
  workflow_dispatch:
  push:
    branches:
      develop
    paths:
      - "**/Dockerfile"
      - ".github/workflows/test.yml"
      - "reference-project/**"
  pull_request:
    paths:
      - "**/Dockerfile"
      - ".github/workflows/test.yml"
      - "reference-project/**"
  schedule:
    - cron: "0 0 * * 0" # weekly

jobs:
  ###########################
  #    Build base and hub   #
  ###########################
  base-and-hub:
    name: üõ†Ô∏è Build base and hub images
    runs-on: ubuntu-latest
    outputs:
      versions: ${{ steps.setup.outputs.versions }}
    steps:
      ###########################
      #          Setup          #
      ###########################
      - name: üöö Checkout
        uses: actions/checkout@v4
      - name: ‚öôÔ∏è Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: ‚öôÔ∏è Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      ###########################
      #   Build base and hub    #
      ###########################
      - name: üõ†Ô∏è Build image (unity3d_base:local)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: base/Dockerfile
          tags: unity3d_base:local
      - name: üõ†Ô∏è Build image (unity3d_hub:local)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: hub/Dockerfile
          build-args: baseImage=unity3d_base:local
          tags: unity3d_hub:local

      ###########################
      #   Save images for next  #
      ###########################
      - name: üíæ Save images for next
        run: |
          docker images
          docker save -o base-and-hub.tar unity3d_base:local unity3d_hub:local
      - name: üì¶ Upload base and hub images for next
        uses: actions/upload-artifact@v4
        with:
          name: base-and-hub
          path: base-and-hub.tar
          retention-days: 1

      ###########################
      #    Setup build matrix   #
      ###########################
      - name: ‚öôÔ∏è Setup build matrix
        id: setup
        run: |
          LATEST_VERSIONS=`npx --yes unity-changeset list --versions --latest-patch --min ${MINIMUM_VERSION} --json --all`
          # ADDITIONAL_VERSIONS=`npx unity-changeset list --versions --grep '0f' --min ${MINIMUM_VERSION} --json`
          ADDITIONAL_VERSIONS=[]

          VERSIONS=`echo "[${LATEST_VERSIONS}, ${ADDITIONAL_VERSIONS}]" \
            | jq -c '[ flatten | sort | unique | .[] | select( test("${{ env.EXCLUDE_FILTER }}") | not ) ]'`
          echo "versions=${VERSIONS}" | tee $GITHUB_OUTPUT $GITHUB_STEP_SUMMARY

  ###########################
  #  Build editor and test  #
  ###########################
  editor:
    needs: base-and-hub
    name: üß™ Test editor (${{ matrix.version }}-${{ matrix.module }})
    runs-on: ubuntu-latest
    env:
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        # The latest patch versions for each minor version.
        version: ${{ fromJson(needs.base-and-hub.outputs.versions) }}
        module:
          - base
          - linux-il2cpp
          - windows-mono
          - mac-mono
          - ios
          - android
          - webgl
        include:
          - module: base
            platform: StandaloneLinux64
          - module: linux-il2cpp
            platform: StandaloneLinux64
          - module: windows-mono
            platform: StandaloneWindows
          - module: mac-mono
            platform: StandaloneOSX
          - module: ios
            platform: iOS
          - module: android
            platform: Android
          - module: webgl
            platform: WebGL

    steps:
      ###########################
      #          Setup          #
      ###########################
      - name: üöö Checkout
        uses: actions/checkout@v4
      - name: ‚öôÔ∏è Setup QEMU
        uses: docker/setup-qemu-action@v3
      - name: ‚öôÔ∏è Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker
      - name: üßπ Free disk space
        run: .github/workflows/scripts/free_disk_space.sh

      ###########################
      #   Restore base and hub  #
      ###########################
      - name: üì• Download artifact
        uses: actions/download-artifact@v4
        with:
          name: base-and-hub

      - name: üì• Restore base and hub
        run: |
          docker load -i base-and-hub.tar

      ###########################
      #      Setup to build     #
      ###########################
      - name: üîç Find changeSet for ${{ matrix.version }}
        id: changeSet
        run: echo "value=`npx --yes unity-changeset ${{ matrix.version }}`" | tee $GITHUB_OUTPUT

      ###########################
      #       Build editor      #
      ###########################
      - name: üõ†Ô∏è Build image (unity3d:local)
        # if: steps.build-1.outcome == 'failure'
        uses: docker/build-push-action@v6
        id: build-1
        continue-on-error: true
        timeout-minutes: 40
        with:
          context: .
          file: editor/Dockerfile
          build-args: |
            baseImage=unity3d_base:local
            hubImage=unity3d_hub:local
            version=${{ matrix.version }}
            changeSet=${{ steps.changeSet.outputs.value }}
            module=${{ matrix.module }}
          tags: unity3d:local

      ###########################
      #   Build editor (retry)  #
      ###########################
      - name: üí§ Sleep for retry
        if: steps.build-1.outcome == 'failure'
        run: sleep 120

      - name: üõ†Ô∏è Build Image (unity3d:local, retry)
        if: steps.build-1.outcome == 'failure'
        uses: docker/build-push-action@v6
        id: build-2
        # continue-on-error: true
        timeout-minutes: 40
        with:
          context: .
          file: editor/Dockerfile
          build-args: |
            baseImage=unity3d_base:local
            hubImage=unity3d_hub:local
            version=${{ matrix.version }}
            changeSet=${{ steps.changeSet.outputs.value }}
            module=${{ matrix.module }}
          tags: unity3d:local

      - name: üì• Cache library
        uses: actions/cache@v4
        with:
          path: reference-project/Library
          key: Library-${{ matrix.version }}-${{ matrix.platform }}-${{ github.sha }}
          restore-keys: |
            Library-${{ matrix.version }}-${{ matrix.platform }}-
            Library-${{ matrix.version }}-
            Library-

      ###########################
      #           Test          #
      ###########################
      - name: üß™ Run tests
        uses: game-ci/unity-test-runner@main
        timeout-minutes: 45
        with:
          unityVersion: ${{ matrix.version }}
          customImage: unity3d:local
          projectPath: reference-project
          customParameters: -nographics -buildTarget ${{ matrix.platform }}

      ###########################
      # Validate Android Utils  #
      ###########################
      - name: üîç Validate Android Utils
        if: matrix.module == 'android'
        uses: addnab/docker-run-action@v3
        with:
          image: unity3d:local
          run: bash -l -c 'java -version && sdkmanager --version && sdkmanager --list'

      ###########################
      #          Build          #
      ###########################
      - name: ‚öôÔ∏è Setup (IL2CPP)
        if: matrix.module == 'linux-il2cpp'
        run: |
          sed -i -e 's/Standalone: 0$/Standalone: 1/' reference-project/ProjectSettings/ProjectSettings.asset

      - name: üõ†Ô∏è Build Unity Project ${{ matrix.module }}
        uses: game-ci/unity-builder@main
        timeout-minutes: 45
        with:
          unityVersion: ${{ matrix.version }}
          customImage: unity3d:local
          projectPath: reference-project
          targetPlatform: ${{ matrix.platform }}
          allowDirtyBuild: true
          customParameters: -nographics

      ###########################
      #       Build (GZip)      #
      ###########################
      - name: ‚öôÔ∏è Setup (WebGL, GZip)
        if: matrix.module == 'webgl'
        run: |
          sed -i -e 's/webGLCompressionFormat: .*$/webGLCompressionFormat: 1/' reference-project/ProjectSettings/ProjectSettings.asset

      - name: üõ†Ô∏è Build Unity Project (WebGL, GZip)
        if: matrix.module == 'webgl'
        uses: game-ci/unity-builder@main
        timeout-minutes: 45
        with:
          unityVersion: ${{ matrix.version }}
          customImage: unity3d:local
          projectPath: reference-project
          targetPlatform: ${{ matrix.platform }}
          allowDirtyBuild: true
          customParameters: -nographics

      ###########################
      #       Build (Brotli)      #
      ###########################
      - name: ‚öôÔ∏è Setup (WebGL, Brotli)
        if: matrix.module == 'webgl'
        run: |
          sed -i -e 's/webGLCompressionFormat: .*$/webGLCompressionFormat: 0/' reference-project/ProjectSettings/ProjectSettings.asset

      - name: üõ†Ô∏è Build Unity Project (WebGL, Brotli)
        if: matrix.module == 'webgl'
        uses: game-ci/unity-builder@main
        timeout-minutes: 45
        with:
          unityVersion: ${{ matrix.version }}
          customImage: unity3d:local
          projectPath: reference-project
          targetPlatform: ${{ matrix.platform }}
          allowDirtyBuild: true
          customParameters: -nographics
