# Build Unity3d editor images
# ========================================================
#
# - Check out latest release and build `editor`.
#   - The existed image tag building will be skipped.
#   - Use `skopeo` to check for the existence of tags.
# - Use `unity-changeset` to get the changeset for a Unity version.
# - Remove large directories before building.
# - This workflow is dispatched from the 'Build All' workflow.
# - The jobs sometimes fail due to timeouts or docker errors.
#
# [Required secrets]
#   DOCKER_USERNAME:    Docker username to login
#   DOCKER_PASSWORD:    Docker password/token
#   GH_WORKFLOW_TOKEN:  Github parsonal access token to dispatch workflow
name: 🛠️ Build Editor Test
run-name: 🛠️ Build Editor Test (${{ inputs.module }}, ${{ inputs.tag }})

on:
  workflow_dispatch:
    inputs:
      versions:
        description: "Unity versions array to build"
        required: true
        default: '[ "2018.4.30f1" ]'
      module:
        description: "Unity module to build.\n(base|linux-il2cpp|windows-mono|mac-mono|ios|android|webgl)"
        required: true
        default: 'base'
      tag:
        description: "Release tag"
        required: true
        default: "v1.5.1"
      push:
        description: "Push image to registry"
        required: true
        default: "true"

jobs:
  build:
    name: Build ${{ matrix.version }}-${{ inputs.module }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      packages: write
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        version: ${{ fromJson(inputs.versions) }}
    steps:
      ###########################
      #    Checkout     #
      ###########################
      - uses: actions/checkout@v5
        with:
          ref: ${{ inputs.tag }}

      ###########################
      #          Setup          #
      ###########################
      # - name: 🧹 Free disk space (Phase 1)
      #   uses: jlumbroso/free-disk-space@main
      #   with:
      #     tool-cache: false
      #     android: true
      #     dotnet: true
      #     haskell: true
      #     large-packages: true
      #     docker-images: true
      #     swap-storage: true

      # - name: 🧹 Free disk space (Phase 2)
      #   run: .github/workflows/scripts/free_disk_space.sh

      # - name: 🔍 Find changeSet for ${{ matrix.version }}
      #   id: changeSet
      #   run: echo "value=`npx --yes unity-changeset@latest ${{ matrix.version }}`" | tee $GITHUB_OUTPUT

      # ###########################
      # #       Setup Docker      #
      # ###########################
      # - name: ⚙️ Setup QEMU
      #   uses: docker/setup-qemu-action@v3
      # - name: ⚙️ Setup buildx
      #   uses: docker/setup-buildx-action@v3
      # - name: 🔑 Login ghcr.io
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ghcr.io
      #     username: mob-sakai
      #     password: ${{ github.token }}
      # - name: 🔑 Login docker.io
      #   uses: docker/login-action@v3
      #   with:
      #     registry: docker.io
      #     username: mobsakai
      #     password: ${{ secrets.DOCKER_PASSWORD }}

      ###########################
      #       Setup meta        #
      ###########################
      - name: ⚙️ Setup metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ghcr.io/mob-sakai/unity3d
            mobsakai/unity3d
          flavor: latest=false
          labels: |
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.documentation=${{ github.event.repository.html_url }}
          tags: |
            type=semver,pattern=${{ matrix.version }}-${{ inputs.module }}-{{raw}},value=${{ inputs.tag }}
            type=raw,value=${{ matrix.version }}-${{ inputs.module }}
            type=match,pattern=(${{ matrix.version }})-base,group=1,value=${{ matrix.version }}-${{ inputs.module }}

      - run: |
          echo "${{ steps.meta.outputs.labels }}" | sed 's/^/--label "/; s/$/"/' > labels
          echo "${{ steps.meta.outputs.tags }}" | sed 's/^/--tag "/; s/$/"/' > tags

          cat << EOS > build-args
            --build-arg version=${{ matrix.version }}
            --build-arg changeSet=xxxxxxxx
            --build-arg module=${{ inputs.module }}
            --build-arg hubImage=ghcr.io/mob-sakai/unity3d_hub:${{ inputs.tag }}
            --build-arg baseImage=ghcr.io/mob-sakai/unity3d_base:${{ inputs.tag }}
          EOS

      - uses: actions/upload-artifact@v5
        with:
          path: |
            labels
            tags
            build-args

      - run: |
          docker buildx build -f editor/Dockerfile \
            $(cat labels) \
            $(cat tags) \
            $(cat build-args) \
            .
